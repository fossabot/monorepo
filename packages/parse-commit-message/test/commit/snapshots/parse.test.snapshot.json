{".parseCommit throw if not a string given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  t.throws(() => parseCommit(123), TypeError);\n  t.throws(() => parseCommit(123), /expect `commit` to be non empty string/);\n  t.throws(() => parseCommit(''), /expect `commit` to be non empty string/);\n}","title":".parseCommit throw if not a string given"},".parseCommit throw when invalid conventional commits":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  function fixture() {\n    parseCommit('fix bar qux');\n  }\n  t.throws(fixture, Error);\n  t.throws(fixture, /<type>\\[optional scope\\]: <description>/);\n}","title":".parseCommit throw when invalid conventional commits"},".parseCommit NOT throw when header is valid by conventional commits":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  const one = parseCommit('fix: zzz qux');\n  const two = parseCommit('fix(cli): aaaa qux');\n  const res = parseCommit('fix(cli): qqqqq qux\\n\\nSome awesome body');\n\n  t.ok(isObject(one));\n  t.ok(isObject(two));\n  t.ok(isObject(res));\n}","title":".parseCommit NOT throw when header is valid by conventional commits"},".parseCommit correctly commit message string without scope":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":4,"str":"(t) => {\n  const result = parseCommit('fix: bar qux');\n\n  t.deepStrictEqual(result, {\n    header: { type: 'fix', scope: null, subject: 'bar qux' },\n    body: null,\n    footer: null,\n  });\n}","title":".parseCommit correctly commit message string without scope"},".parseCommit header string with scope":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":5,"str":"(t) => {\n  t.deepStrictEqual(parseCommit('fix(cli): bar qux'), {\n    header: { type: 'fix', scope: 'cli', subject: 'bar qux' },\n    body: null,\n    footer: null,\n  });\n}","title":".parseCommit header string with scope"}}