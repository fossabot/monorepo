{".validateCommit should return boolean when second param `ret` is not given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  const header = { type: 'fix', subject: 'bar qux' };\n  const boolTrue = validateCommit({\n    header,\n    body: 'foo',\n  });\n  const boolFalse = validateCommit({ header, body: 111, footer: 'sasa' });\n\n  t.strictEqual(boolTrue, true);\n  t.strictEqual(boolFalse, false);\n}","title":".validateCommit should return boolean when second param `ret` is not given"},".validateCommit should return { error, value } object when `ret` is true":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const header = { type: 'major', scope: 'qux', subject: 'some awful change' };\n  const result = validateCommit({ header, body: 'okkk' }, true);\n\n  t.deepStrictEqual(result, {\n    value: { header, body: 'okkk', footer: null },\n  });\n\n  const res2 = validateCommit({ header: { foo: 1 }, body: 'a' }, true);\n  t.ok(res2.error);\n  t.ok(res2.error instanceof Error);\n  t.ok(!res2.value);\n}","title":".validateCommit should return { error, value } object when `ret` is true"}}