{"main: basic":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  t.strictEqual(typeof parse, 'function');\n}","title":"main: basic"},"should parse() string commit message into an array of Commit objects":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const result = parse('fix: foo bar');\n  t.strictEqual(Array.isArray(result), true);\n\n  const [res] = result;\n  t.deepStrictEqual(res, {\n    header: { type: 'fix', scope: null, subject: 'foo bar' },\n    body: null,\n    footer: null,\n  });\n}","title":"should parse() string commit message into an array of Commit objects"},"should parse(string) return an object when `flat: true` and single commit":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  const res = parse('feat(cli): qux bar', true);\n\n  t.strictEqual(typeof res, 'object');\n  t.strictEqual(Array.isArray(res), false);\n  t.strictEqual(res.header.scope, 'cli');\n}","title":"should parse(string) return an object when `flat: true` and single commit"},"should parse() work okey with array of arrays":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":4,"str":"(t) => {\n  const [one, two] = parse(['fix: bar', ['qux: zaz']]);\n\n  t.deepStrictEqual(one, {\n    header: { type: 'fix', scope: null, subject: 'bar' },\n    body: null,\n    footer: null,\n  });\n  t.deepStrictEqual(two, {\n    header: { type: 'qux', scope: null, subject: 'zaz' },\n    body: null,\n    footer: null,\n  });\n}","title":"should parse() work okey with array of arrays"},"should parse(object) passthrough if object is passed as commit":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":5,"str":"(t) => {\n  const result = parse({ foo: 'bar' }, true);\n\n  t.strictEqual(typeof result, 'object');\n  t.strictEqual(result.foo, 'bar');\n}","title":"should parse(object) passthrough if object is passed as commit"},"should parse(array) be able to accept array":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":6,"str":"(t) => {\n  const commits = parse([\n    'fix: bar qux',\n    dedent`feat(cli): zazzy qux\n\n    BREAKING CHANGE: woo hoo`,\n    'chore(ci): abc fux',\n    dedent`fix(src-foo): alleluah yeah\n\n    resolves #3\n    closes #123\n\n    Signed-off-by: Foo Bar <abc@exam.pl>`,\n  ]);\n\n  t.strictEqual(commits.length, 4);\n\n  const [one, two, three, four] = commits;\n  t.strictEqual(one.header.type, 'fix');\n  t.strictEqual(one.header.scope, null);\n  t.strictEqual(one.header.subject, 'bar qux');\n  t.strictEqual(one.body, null);\n  t.strictEqual(one.footer, null);\n\n  t.strictEqual(two.header.type, 'feat');\n  t.strictEqual(two.header.scope, 'cli');\n  t.strictEqual(two.header.subject, 'zazzy qux');\n  t.strictEqual(two.body, 'BREAKING CHANGE: woo hoo');\n  t.strictEqual(two.footer, null);\n\n  t.strictEqual(three.header.type, 'chore');\n  t.strictEqual(three.header.scope, 'ci');\n  t.strictEqual(three.header.subject, 'abc fux');\n  t.strictEqual(three.body, null);\n  t.strictEqual(three.footer, null);\n\n  t.strictEqual(four.header.type, 'fix');\n  t.strictEqual(four.header.scope, 'src-foo');\n  t.strictEqual(four.header.subject, 'alleluah yeah');\n  t.strictEqual(four.body, 'resolves #3\\ncloses #123');\n  t.strictEqual(four.footer, 'Signed-off-by: Foo Bar <abc@exam.pl>');\n}","title":"should parse(array) be able to accept array"}}