{"should check(string) be able to accept a string and return an array of object items":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  const res = check('fix: bar qux');\n\n  t.strictEqual(Array.isArray(res), true);\n  t.strictEqual(res.length, 1);\n  t.strictEqual(typeof res[0], 'object');\n  t.deepStrictEqual(res[0], {\n    header: {\n      type: 'fix',\n      scope: null,\n      subject: 'bar qux',\n    },\n    body: null,\n    footer: null,\n  });\n}","title":"should check(string) be able to accept a string and return an array of object items"},"should check(string) support flat=true":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const res = check('fix: bar', true);\n  t.strictEqual(Array.isArray(res), false);\n  t.strictEqual(typeof res, 'object');\n}","title":"should check(string) support flat=true"},"should check(object|array) return array even with flat=true, if more than 1 commits":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  const commits = [\n    'feat(ci): tweaks bar\\n\\nAwesome body',\n    { header: { type: 'refactor', subject: 'woo hoo' } },\n  ];\n  const res = check(commits, true);\n  t.strictEqual(Array.isArray(res), true);\n\n  const [one, two] = res;\n\n  t.deepStrictEqual(one, {\n    header: { type: 'feat', scope: 'ci', subject: 'tweaks bar' },\n    body: 'Awesome body',\n    footer: null,\n  });\n  t.deepStrictEqual(two, {\n    header: { type: 'refactor', scope: null, subject: 'woo hoo' },\n    body: null,\n    footer: null,\n  });\n}","title":"should check(object|array) return array even with flat=true, if more than 1 commits"}}