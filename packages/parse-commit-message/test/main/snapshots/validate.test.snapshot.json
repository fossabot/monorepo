{".validate should return boolean when second param `ret` is not given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  const header = { type: 'fix', subject: 'bar qux' };\n  const boolTrue = validate({\n    header,\n    body: 'foo',\n  });\n  const boolFalse = validate({ header, body: 111, footer: 'sasa' });\n\n  t.strictEqual(boolTrue, true);\n  t.strictEqual(boolFalse, false);\n}","title":".validate should return boolean when second param `ret` is not given"},".validate should return { error, value } objects when `ret` is true":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const header = { type: 'major', scope: 'qux', subject: 'some awful change' };\n  const result = validate({ header, body: 'okkk' }, true);\n\n  t.deepStrictEqual(result.value, [{ header, body: 'okkk', footer: null }]);\n\n  const res2 = validate({ header: { foo: 1 }, body: 'a' }, true);\n  t.ok(res2.error);\n  t.ok(res2.error instanceof Error);\n  t.ok(!res2.value);\n}","title":".validate should return { error, value } objects when `ret` is true"},"should validate() similar to check() be able to accept array of mixed values":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  const commits = [\n    'fix: abr\\n\\nquxx qq',\n    { header: { type: 'qq', subject: 'ok ok' } },\n  ];\n  const { value } = validate(commits, true);\n\n  t.deepStrictEqual(value, [\n    {\n      header: { type: 'fix', scope: null, subject: 'abr' },\n      body: 'quxx qq',\n      footer: null,\n    },\n    {\n      header: { type: 'qq', scope: null, subject: 'ok ok' },\n      body: null,\n      footer: null,\n    },\n  ]);\n}","title":"should validate() similar to check() be able to accept array of mixed values"}}