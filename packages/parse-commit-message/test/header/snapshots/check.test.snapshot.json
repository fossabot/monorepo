{".checkHeader throw if not object given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  t.throws(() => checkHeader({}), TypeError);\n  t.throws(() => checkHeader([]), TypeError);\n  t.throws(() => checkHeader(null), TypeError);\n  t.throws(() => checkHeader(123), /expect `header` to be an object/);\n}","title":".checkHeader throw if not object given"},".checkHeader throw if header.type is not a string":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const fixture = () => checkHeader({ foo: 'bar' });\n  t.throws(fixture, /type should be non empty string/);\n}","title":".checkHeader throw if header.type is not a string"},".checkHeader throw if header.subject is not a string":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  t.throws(\n    () => checkHeader({ type: 'fix' }),\n    /subject should be non empty string/,\n  );\n  t.throws(\n    () => checkHeader({ type: 'fix', subject: '' }),\n    /subject should be non empty string/,\n  );\n}","title":".checkHeader throw if header.subject is not a string"},".checkHeader throw if header.scope is not a string when given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":4,"str":"(t) => {\n  t.throws(\n    () => checkHeader({ type: 'fix', subject: 'qux zaz', scope: 123 }),\n    /scope should be non empty string when given/,\n  );\n}","title":".checkHeader throw if header.scope is not a string when given"},".checkHeader should header.scope be `null` when explicitly null given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":5,"str":"(t) => {\n  const result = checkHeader({ type: 'fix', subject: 'ss', scope: null });\n  t.deepStrictEqual(result, { type: 'fix', subject: 'ss', scope: null });\n}","title":".checkHeader should header.scope be `null` when explicitly null given"},".checkHeader should header.scope be null when not given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":6,"str":"(t) => {\n  const res = checkHeader({ type: 'aaa', subject: 'quxie bar' });\n  t.deepStrictEqual(res, { type: 'aaa', subject: 'quxie bar', scope: null });\n}","title":".checkHeader should header.scope be null when not given"},".checkHeader correctly header object without scope":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":7,"str":"(t) => {\n  const result = checkHeader({\n    type: 'fix',\n    subject: 'bar qux',\n  });\n\n  t.deepStrictEqual(result, { type: 'fix', scope: null, subject: 'bar qux' });\n}","title":".checkHeader correctly header object without scope"},".checkHeader object with scope":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":8,"str":"(t) => {\n  const header = {\n    type: 'feat',\n    scope: 'quxie',\n    subject: 'woo hoo',\n  };\n\n  t.deepStrictEqual(checkHeader(header), header);\n}","title":".checkHeader object with scope"}}