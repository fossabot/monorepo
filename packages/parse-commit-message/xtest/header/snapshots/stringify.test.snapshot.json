{".stringifyHeader throw if invalid header is given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  t.throws(() => stringifyHeader(1234), TypeError);\n  t.throws(() => stringifyHeader({ type: 'foo' }), TypeError);\n  t.throws(() => stringifyHeader(), /expect `header` to be an object/);\n}","title":".stringifyHeader throw if invalid header is given"},".stringifyHeader object":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const header = { type: 'fix', scope: 'huh', subject: 'yeah yeah' };\n  const result = stringifyHeader(header);\n\n  t.strictEqual(result, 'fix(huh): yeah yeah');\n}","title":".stringifyHeader object"},".stringifyHeader object without scope":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  const header = { type: 'fix', subject: 'yeah yeah' };\n  const result = stringifyHeader(header);\n\n  t.strictEqual(result, 'fix: yeah yeah');\n}","title":".stringifyHeader object without scope"}}