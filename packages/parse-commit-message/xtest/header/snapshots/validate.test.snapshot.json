{".validateHeader should return boolean when second param `ret` is not given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  const boolTrue = validateHeader({ type: 'fix', subject: 'bar qux' });\n  const boolFalse = validateHeader({ type: 'fix' });\n\n  t.strictEqual(boolTrue, true);\n  t.strictEqual(boolFalse, false);\n}","title":".validateHeader should return boolean when second param `ret` is not given"},".validateHeader should return { error, value } object when `ret` is true":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const result = validateHeader({ type: 'fix', subject: 'bar qux' }, true);\n\n  t.deepStrictEqual(result, {\n    value: { type: 'fix', scope: null, subject: 'bar qux' },\n  });\n\n  const res2 = validateHeader({ type: 'fix' }, true);\n  t.ok(res2.error);\n  t.ok(res2.error instanceof Error);\n  t.ok(!res2.value);\n}","title":".validateHeader should return { error, value } object when `ret` is true"}}