{"should stringify(string) check and validate and return array of commit messages":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  const result = stringify('fix: foo bar');\n  t.strictEqual(Array.isArray(result), true);\n\n  const [res] = result;\n  t.strictEqual(res, 'fix: foo bar');\n\n  t.throws(() => stringify('foo bar baz'), Error);\n  t.throws(() => stringify(123), TypeError);\n  t.throws(() => stringify('fix(): zazaz'), /expect `commit` to follow/);\n}","title":"should stringify(string) check and validate and return array of commit messages"},"should stringify support passing flat=true":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const res = stringify(['foo: bar baz'], true);\n  t.strictEqual(typeof res, 'string');\n}","title":"should stringify support passing flat=true"},"should stringify return array even with flat=true, if more than 1 commits":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  const res = stringify(['foo: bar baz', 'boo: qux zaz'], true);\n  t.strictEqual(Array.isArray(res), true);\n}","title":"should stringify return array even with flat=true, if more than 1 commits"},"should stringify(object) into array of commits":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":4,"str":"(t) => {\n  const result = stringify({ header: { type: 'test', subject: 'updates' } });\n\n  t.strictEqual(Array.isArray(result), true);\n  t.strictEqual(result[0], 'test: updates');\n}","title":"should stringify(object) into array of commits"},"should stringify check and validate an array of mixed values":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":5,"str":"(t) => {\n  const commits = [\n    'fix: bar qux',\n    {\n      header: { type: 'bar', scope: 'zz', subject: 'quack quack' },\n      body: 'fixes #1\\ncloses #12',\n      footer: 'Signed of by',\n    },\n    dedent`feat(cli): bah bah\n\n    resolves #3\n    `,\n    { header: { type: 'test', scope: 'ok', subject: 'bar quack' }, zaz: 12 },\n  ];\n\n  const commitMessages = stringify(commits);\n\n  t.strictEqual(commitMessages.length, 4);\n  t.deepStrictEqual(commitMessages, [\n    'fix: bar qux',\n    'bar(zz): quack quack\\n\\nfixes #1\\ncloses #12\\n\\nSigned of by',\n    'feat(cli): bah bah\\n\\nresolves #3',\n    'test(ok): bar quack',\n  ]);\n}","title":"should stringify check and validate an array of mixed values"}}