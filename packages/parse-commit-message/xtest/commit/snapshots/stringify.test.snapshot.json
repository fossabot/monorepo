{".stringifyCommit throw if invalid header is given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  t.throws(() => stringifyCommit(1234), TypeError);\n  t.throws(() => stringifyCommit({ header: { type: 'foo' } }), TypeError);\n  t.throws(() => stringifyCommit(), /expect `commit` to be an object/);\n}","title":".stringifyCommit throw if invalid header is given"},".stringifyCommit object":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const header = { type: 'fix', scope: 'huh', subject: 'yeah yeah' };\n  const result = stringifyCommit({ header });\n\n  t.strictEqual(result, 'fix(huh): yeah yeah');\n\n  const cmt = {\n    header,\n    body: 'resolves #1\\nfixes #3',\n    footer: 'BREAKING CHANGE: yeah!',\n  };\n  const commitMessage = dedent`${result}\n\n  resolves #1\n  fixes #3\n\n  BREAKING CHANGE: yeah!`;\n\n  t.strictEqual(stringifyCommit(cmt), commitMessage);\n}","title":".stringifyCommit object"},".stringifyCommit object without scope":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  const header = {\n    header: { type: 'fix', subject: 'yeah yeah' },\n    body: 'woo hoo',\n  };\n  const result = stringifyCommit(header);\n\n  t.strictEqual(result, 'fix: yeah yeah\\n\\nwoo hoo');\n}","title":".stringifyCommit object without scope"}}