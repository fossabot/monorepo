{".checkCommit throw if not object given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  t.throws(() => checkCommit({}), TypeError);\n  t.throws(() => checkCommit([]), TypeError);\n  t.throws(() => checkCommit(null), TypeError);\n  t.throws(() => checkCommit(123), /expect `commit` to be an object/);\n}","title":".checkCommit throw if not object given"},".checkCommit throw if commit.header.type is not a string":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const fixture = () => checkCommit({ header: { foo: 'bar' } });\n  t.throws(fixture, /type should be non empty string/);\n}","title":".checkCommit throw if commit.header.type is not a string"},".checkCommit throw if commit.header.subject is not a string":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  t.throws(\n    () => checkCommit({ header: { type: 'fix' } }),\n    /subject should be non empty string/,\n  );\n  t.throws(\n    () => checkCommit({ header: { type: 'fix', subject: '' } }),\n    /subject should be non empty string/,\n  );\n}","title":".checkCommit throw if commit.header.subject is not a string"},".checkCommit throw if commit.header.scope is not a string when given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":4,"str":"(t) => {\n  const commit = { header: { type: 'fix', subject: 'qux zaz', scope: 123 } };\n  t.throws(\n    () => checkCommit(commit),\n    /scope should be non empty string when given/,\n  );\n}","title":".checkCommit throw if commit.header.scope is not a string when given"},".checkCommit throw if commit.body is not a string when given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":5,"str":"(t) => {\n  const commit = { header: { type: 'fix', subject: 'qux zaz' }, body: 123 };\n  t.throws(() => checkCommit(commit), /body should be string when given/);\n}","title":".checkCommit throw if commit.body is not a string when given"},".checkCommit throw if commit.footer is not a string when given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":6,"str":"(t) => {\n  const commit = { header: { type: 'fix', subject: 'qux zaz' }, footer: 123 };\n  t.throws(() => checkCommit(commit), /footer should be string when given/);\n}","title":".checkCommit throw if commit.footer is not a string when given"},".checkCommit should commit.body be `null` when explicitly null given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":7,"str":"(t) => {\n  const header = { type: 'fix', scope: 'cli', subject: 'zzz' };\n  const commit = { header, body: null, footer: 'xyz' };\n  const result = checkCommit(commit);\n\n  t.deepStrictEqual(result, {\n    header: { type: 'fix', scope: 'cli', subject: 'zzz' },\n    body: null,\n    footer: 'xyz',\n  });\n}","title":".checkCommit should commit.body be `null` when explicitly null given"},".checkCommit should commit.body be null when not given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":8,"str":"(t) => {\n  const header = { type: 'feat', scope: 'zazzy', subject: 'okey dude' };\n  const commit = { header, footer: 'ok ok' };\n  const result = checkCommit(commit);\n\n  t.deepStrictEqual(result, { header, body: null, footer: 'ok ok' });\n}","title":".checkCommit should commit.body be null when not given"},".checkCommit should commit.footer be `null` when explicitly null given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":9,"str":"(t) => {\n  const header = { type: 'fix', scope: 'cli', subject: 'zzz' };\n  const commit = { header, footer: null, body: 'BREAKING CHANGE: whoa!' };\n  const result = checkCommit(commit);\n\n  t.deepStrictEqual(result, {\n    header: { type: 'fix', scope: 'cli', subject: 'zzz' },\n    body: 'BREAKING CHANGE: whoa!',\n    footer: null,\n  });\n}","title":".checkCommit should commit.footer be `null` when explicitly null given"},".checkCommit should commit.footer be null when not given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":10,"str":"(t) => {\n  const header = { type: 'feat', scope: 'zazzy', subject: 'okey dude' };\n  const commit = { header };\n  const result = checkCommit(commit);\n  t.deepStrictEqual(result, { header, body: null, footer: null });\n}","title":".checkCommit should commit.footer be null when not given"},".checkCommit object with scope, body and footer":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":11,"str":"(t) => {\n  const commit = {\n    header: {\n      type: 'feat',\n      scope: 'quxie',\n      subject: 'woo hoo',\n    },\n    body: 'qux zaz faz',\n    footer: 'Breaking yeah',\n  };\n  t.deepStrictEqual(checkCommit(commit), commit);\n}","title":".checkCommit object with scope, body and footer"},"should checkCommit allow empty string body (git commit deafults)":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":12,"str":"(t) => {\n  const header = { type: 'feat', scope: 'zazzy', subject: 'okey dude' };\n  const commit = { header, body: '' };\n  const result = checkCommit(commit);\n\n  t.strictEqual(result.body, '');\n}","title":"should checkCommit allow empty string body (git commit deafults)"},"should checkCommit allow empty string footer (git commit deafults)":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":13,"str":"(t) => {\n  const header = { type: 'feat', scope: 'zazzy', subject: 'okey dude' };\n  const commit = { header, footer: '' };\n  const result = checkCommit(commit);\n\n  t.strictEqual(result.footer, '');\n}","title":"should checkCommit allow empty string footer (git commit deafults)"}}